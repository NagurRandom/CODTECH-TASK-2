import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Step 1: Generate a synthetic dataset
np.random.seed(42)
X = 2 * np.random.rand(100, 1)
y = 4 + 3 * X + np.random.randn(100, 1)

# Convert to pandas DataFrame for easier handling
data = pd.DataFrame(np.hstack((X, y)), columns=['X', 'y'])

# Step 2: Split the dataset into training and testing sets
train_data, test_data = train_test_split(data, test_size=0.2, random_state=42)

X_train = train_data[['X']]
y_train = train_data['y']
X_test = test_data[['X']]
y_test = test_data['y']

# Step 3: Train a simple linear regression model on the training data
model = LinearRegression()
model.fit(X_train, y_train)

# Step 4: Evaluate the model's performance
y_train_pred = model.predict(X_train)
y_test_pred = model.predict(X_test)

mse_train = mean_squared_error(y_train, y_train_pred)
r2_train = r2_score(y_train, y_train_pred)
mse_test = mean_squared_error(y_test, y_test_pred)
r2_test = r2_score(y_test, y_test_pred)

print(f'Training MSE: {mse_train}')
print(f'Training R^2: {r2_train}')
print(f'Test MSE: {mse_test}')
print(f'Test R^2: {r2_test}')

# Step 5: Visualize the regression line and actual vs. predicted values
plt.figure(figsize=(14, 6))

# Plot the regression line
plt.subplot(1, 2, 1)
plt.scatter(X, y, color='blue', label='Actual data')
plt.plot(X, model.predict(X), color='red', linewidth=2, label='Regression line')
plt.xlabel('X')
plt.ylabel('y')
plt.title('Regression Line')
plt.legend()

# Plot actual vs. predicted values
plt.subplot(1, 2, 2)
plt.scatter(y_test, y_test_pred, color='green')
plt.plot([y.min(), y.max()], [y.min(), y.max()], 'k--', lw=2)
plt.xlabel('Actual')
plt.ylabel('Predicted')
plt.title('Actual vs. Predicted Values')

plt.show()
